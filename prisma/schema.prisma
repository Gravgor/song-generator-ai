// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  username         String?
  userFirstPayment Boolean       @default(true)
  avatarUrl        String?
  password         String?
  userSongs        Songs[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  UserPayment      UserPayment[]

  SongProgress SongProgress[]
}

model UserPayment {
  id        String   @id @default(cuid())
  userId    String
  currency  String
  paymentIntent String @db.LongText
  userCountry String
  userEmail  String
  userName   String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Songs {
  id              String   @id @default(cuid())
  title           String
  cover_url_small String
  cover_url_big   String
  audio_url       String
  video_url       String
  play_count      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User?    @relation(fields: [userId], references: [id])
  userId          String?
}

model SongProgress {
  id         String   @id @default(cuid())
  userId     String
  songIdea   String
  songTitle  String
  style      String?  @db.LongText
  tone       String?  @db.LongText
  vocalStyle String?  @db.LongText
  influences String?  @db.LongText
  lyrics     String?  @db.LongText
  step       Int
  userPaymentStarted Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
}
